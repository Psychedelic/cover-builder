name: Cover build

on:
  workflow_dispatch:
    inputs:
      owner_id_and_delegate_canister_id:
        description: 'Owner id and delegate canister id'
        required: true
        type: string
      canister_id:
        description: 'Canister id'
        required: true
        type: string
      canister_name:
        description: 'Canister name'
        required: true
        type: string
      repo_url_and_visibility:
        description: 'Repo url and visibility'
        required: true
        type: string
      repo_access_token:
        description: 'Repo access token'
        required: false
        type: string
      commit_hash:
        description: 'Repo commit hash'
        required: true
        type: string
      rust_version:
        description: 'Rust version'
        required: false
        type: string
      dfx_version:
        description: 'DFX version'
        required: true
        type: string
      optimize_count:
        description: 'Optimize count'
        required: true
        type: string
      env:
        description: 'Env'
        required: true
        type: string

jobs:
  build:
    runs-on: ubuntu-20.04
    defaults:
      run:
        shell: bash
    container: psychedelichq/cover
    steps:
      # validated by cover-validator
      - name: Parse canister info
        if: always()
        run: |
          OWNER_ID=$(echo "${{ github.event.inputs.owner_id_and_delegate_canister_id }}" | cut -d "|" -f 1)
          DELEGATE_CANISTER_ID=$(echo "${{ github.event.inputs.owner_id_and_delegate_canister_id }}" | cut -d "|" -f 2)
          if [[ -z ${DELEGATE_CANISTER_ID} ]]; then
            DELEGATE_CANISTER_ID=null
          else
            DELEGATE_CANISTER_ID="opt principal\"${DELEGATE_CANISTER_ID}\""
          fi
          echo "OWNER_ID=${OWNER_ID}" >> $GITHUB_ENV
          echo "DELEGATE_CANISTER_ID=${DELEGATE_CANISTER_ID}" >> $GITHUB_ENV

      # validated by cover-validator
      - name: Parse repo info
        if: always()
        run: |
          REPO_URL=$(echo "${{ github.event.inputs.repo_url_and_visibility }}" | cut -d "|" -f 1)
          REPO_VISIBILITY=$(echo "${{ github.event.inputs.repo_url_and_visibility }}" | cut -d "|" -f 2)
          echo "REPO_URL=${REPO_URL}" >> $GITHUB_ENV
          echo "REPO_VISIBILITY=${REPO_VISIBILITY}" >> $GITHUB_ENV

      # validated by cover-validator
      - name: Parse rust version info
        if: always()
        run: |
          RUST_VERSION_RESULT=null
          if [[ ! -z ${{ github.event.inputs.rust_version }} ]]; then
            RUST_VERSION_RESULT="opt\"${{ github.event.inputs.rust_version }}\""
          fi
          echo "RUST_VERSION_RESULT=${RUST_VERSION_RESULT}" >> $GITHUB_ENV

      - name: Cache DFX
        id: cache-dfx
        uses: actions/cache@v2
        with:
          path: /usr/local/bin/dfx
          key: Ubuntu-dfx-version-${{ github.event.inputs.dfx_version }}

      - name: Install DFX
        if: steps.cache-dfx.outputs.cache-hit != 'true'
        env:
          DFX_VERSION: ${{ github.event.inputs.dfx_version }}
        run: |
          echo "No DFX found. Start downloading..."
          curl -fsSL https://sdk.dfinity.org/install.sh | bash

      - name: Init Builder Identity
        if: always()
        run: |
          echo "{}" > dfx.json
          if ! type dfx > /dev/null
          then
           echo "No DFX found. Start downloading..."
           DFX_VERSION="" sh -ci "$(curl -fsSL https://sdk.dfinity.org/install.sh)"
          fi
          if [ "${{ github.event.inputs.env }}" = "development" ]
          then
            echo "${{ secrets.COVER_BUILDER_PEM_DEV }}" > identity.pem
            CANISTER_ID="3x7en-uqaaa-aaaai-abgca-cai"
          else
            echo "${{ secrets.COVER_BUILDER_PEM_PROD }}" > identity.pem
            CANISTER_ID="iftvq-niaaa-aaaai-qasga-cai"
          fi
          echo "CANISTER_ID=${CANISTER_ID}" >> $GITHUB_ENV
          # version checking
          if [[ "${{ github.event.inputs.dfx_version }}" =~ ^[0-9]+\.[0-9][0-9]+\.[0-9]+$ ]]
          then
            dfx identity import --disable-encryption cover identity.pem
          else
            dfx identity import cover identity.pem
          fi
          dfx identity use cover

      - name: Init Verification
        if: always()
        run: |
          dfx canister --network ic call "${CANISTER_ID}" submitVerification  \
          "(record{ \
            owner_id=principal\"${OWNER_ID}\"; \
            delegate_canister_id=${DELEGATE_CANISTER_ID}; \
            canister_id=principal\"${{ github.event.inputs.canister_id }}\"; \
            canister_name=\"${{ github.event.inputs.canister_name }}\"; \
            repo_url=\"${REPO_URL}\"; \
            commit_hash=\"${{ github.event.inputs.commit_hash }}\"; \
            build_url=\"https://github.com/Psychedelic/cover-builder/actions/runs/${{github.run_id}}\"; \
            build_status=variant{ Building }; \
            rust_version=${RUST_VERSION_RESULT}; \
            dfx_version=\"${{ github.event.inputs.dfx_version }}\"; \
            optimize_count=${{ github.event.inputs.optimize_count }}:nat8; \
            repo_visibility=\"${REPO_VISIBILITY}\"; \
          })"

      - name: Clone github repo
        run: |
          git init
          if [ -z ${{ github.event.inputs.repo_access_token }} ]
          then
            git remote add origin https://github.com/${REPO_URL}
          else
            git remote add origin https://${{ github.event.inputs.repo_access_token }}@github.com/${REPO_URL}
          fi
          git fetch origin ${{ github.event.inputs.commit_hash }} --depth 1
          git reset --hard FETCH_HEAD

      - name: Validate dfx build type
        run: |
          CANISTER_TYPE=$(jq '.canisters."${{ github.event.inputs.canister_name }}".type' < dfx.json)
          case $CANISTER_TYPE in
            (\"rust\" | \"motoko\")
              CANISTER_TYPE="$(echo ${CANISTER_TYPE} | tr -d '"')"
              CANISTER_TYPE="$(echo ${CANISTER_TYPE} | awk '{ print toupper(substr($0, 1, 1)) substr($0, 2) }')"
              echo "CANISTER_TYPE=$CANISTER_TYPE" >> $GITHUB_ENV
              echo "Passed"
              ;;
            (*)
              echo "Only support DFX build type \"rust\" or \"motoko\""
              exit 1
              ;;
          esac

      - name: Cache Rust
        id: cache-rust
        uses: actions/cache@v2
        with:
          path: |
            /opt/cargo/bin/cargo
            /opt/cargo/bin/rustc
            /opt/cargo/bin/rustup
            /opt/cargo/registry/index/
            /opt/cargo/registry/cache/
            /opt/cargo/git/db/
            /opt/rustup/
            target/
          key: Ubuntu-cargo-${{ hashFiles('**/Cargo.lock') }}-version-${{ github.event.inputs.rust_version }}

      - name: Setup env
        if: github.event.inputs.rust_version != ''
        run: |
          echo "RUSTUP_HOME=/opt/rustup" >> $GITHUB_ENV
          echo "CARGO_HOME=/opt/cargo" >> $GITHUB_ENV
          echo "PATH=/opt/cargo/bin:$PATH" >> $GITHUB_ENV

      - name: Install Rust toolchain
        if: github.event.inputs.rust_version != '' && steps.cache-rust.outputs.cache-hit != 'true'
        env:
          RUST_VERSION: ${{ github.event.inputs.rust_version }}
        run: |
          echo "No Rust found. Start downloading..."
          curl --fail https://sh.rustup.rs/ -sSf | sh -s -- -y --default-toolchain ${RUST_VERSION}-x86_64-unknown-linux-gnu --no-modify-path
          rustup default ${RUST_VERSION}-x86_64-unknown-linux-gnu
          rustup target add wasm32-unknown-unknown

      - name: Build wasm
        run: dfx build --network ic ${{ github.event.inputs.canister_name }}

      - name: Cache ic-cdk-optimizer
        if: github.event.inputs.optimize_count > 0 && github.event.inputs.rust_version != ''
        id: cache-ic-cdk-optimizer
        uses: actions/cache@v2
        with:
          path: /opt/cargo/bin/ic-cdk-optimizer
          key: Ubuntu-ic-cdk-optimizer-rust-version-${{ github.event.inputs.rust_version }}

      - name: Install optimizer
        if: github.event.inputs.optimize_count > 0 && github.event.inputs.rust_version != '' && steps.cache-ic-cdk-optimizer.outputs.cache-hit != 'true'
        run: cargo install ic-cdk-optimizer

      - name: Optimize wasm
        if: github.event.inputs.optimize_count > 0 && github.event.inputs.rust_version != ''
        run: |
          i=0
          while [ $i -lt ${{ github.event.inputs.optimize_count }} ]
          do
            ic-cdk-optimizer .dfx/ic/canisters/${{ github.event.inputs.canister_name }}/${{ github.event.inputs.canister_name }}.wasm \
            -o .dfx/ic/canisters/${{ github.event.inputs.canister_name }}/${{ github.event.inputs.canister_name }}.wasm
            i=`expr $i + 1`
          done

      - name: Hash wasm
        run: |
          echo "WASM_HASH=$(openssl dgst -sha256 .dfx/ic/canisters/${{ github.event.inputs.canister_name }}/${{ github.event.inputs.canister_name }}.wasm | awk '/.+$/{print "0x"$2}')" >> $GITHUB_ENV

      - name: Update verification
        if: always()
        run: |
          if [ -z "$WASM_HASH" ]; then
            BUILD_STATUS="variant{ Error }"
          else
            BUILD_STATUS="variant{ Success }"
          fi

          WASM_HASH_RESULT=null
          if [ ! -z "$WASM_HASH" ]; then
            WASM_HASH_RESULT="opt\"$WASM_HASH\""
          fi

          CANISTER_TYPE_RESULT=null
          if [ ! -z "$CANISTER_TYPE" ]; then
            CANISTER_TYPE_RESULT="opt variant{ $CANISTER_TYPE }"
          fi

          dfx canister --network ic call "${CANISTER_ID}" submitVerification  \
          "(record{ \
            owner_id=principal\"${OWNER_ID}\"; \
            delegate_canister_id=${DELEGATE_CANISTER_ID}; \
            canister_id=principal\"${{ github.event.inputs.canister_id }}\"; \
            canister_name=\"${{ github.event.inputs.canister_name }}\"; \
            repo_url=\"${REPO_URL}\"; \
            commit_hash=\"${{ github.event.inputs.commit_hash }}\"; \
            wasm_hash=$WASM_HASH_RESULT; \
            build_url=\"https://github.com/Psychedelic/cover-builder/actions/runs/${{github.run_id}}\"; \
            build_status=$BUILD_STATUS; \
            rust_version=${RUST_VERSION_RESULT}; \
            dfx_version=\"${{ github.event.inputs.dfx_version }}\"; \
            optimize_count=${{ github.event.inputs.optimize_count }}:nat8; \
            canister_type=$CANISTER_TYPE_RESULT; \
            repo_visibility=\"${REPO_VISIBILITY}\"; \
          })"
