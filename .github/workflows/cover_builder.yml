name: Cover build

on:
  workflow_dispatch:
    inputs:
      owner_id:
        description: 'Owner id'
        required: true
        type: string
      canister_id:
        description: 'Canister id'
        required: true
        type: string
      canister_name:
        description: 'Canister name'
        required: true
        type: string
      repo_url:
        description: 'Repo url'
        required: true
        type: string
      repo_access_token:
        description: 'Repo access token'
        required: false
        type: string
      commit_hash:
        description: 'Repo commit hash'
        required: true
        type: string
      rust_version:
        description: 'Rust version'
        required: false
        type: string
      dfx_version:
        description: 'DFX version'
        required: true
        type: string
      optimize_count:
        description: 'Optimize count'
        required: true
        type: string
      env:
        description: 'Env'
        required: true
        type: string

jobs:
  build:
    runs-on: ubuntu-20.04
    defaults:
      run:
        shell: bash
    container: psychedelichq/cover
    steps:
      - name: Cache DFX
        id: cache-dfx
        uses: actions/cache@v2
        with:
          path: /usr/local/bin/dfx
          key: Ubuntu-dfx-version-${{ github.event.inputs.dfx_version }}

      - name: Install DFX
        if: steps.cache-dfx.outputs.cache-hit != 'true'
        env:
          DFX_VERSION: ${{ github.event.inputs.dfx_version }}
        run: |
          echo "No DFX found. Start downloading..."
          curl -fsSL https://sdk.dfinity.org/install.sh | bash

      - name: Check repo visibility
        if: always()
        run: |
          REPO_VISIBILITY=private
          if [ -z ${{ github.event.inputs.repo_access_token }} ]
          then
            REPO_VISIBILITY=public
          fi
          echo "REPO_VISIBILITY=$REPO_VISIBILITY" >> $GITHUB_ENV

      - name: Init Builder Identity
        if: always()
        run: |
          echo "{}" > dfx.json
          if ! type dfx > /dev/null
          then
           echo "No DFX found. Start downloading..."
           DFX_VERSION="" sh -ci "$(curl -fsSL https://sdk.dfinity.org/install.sh)"
          fi
          if [ "${{ github.event.inputs.env }}" = "development" ]
          then
            echo "${{ secrets.COVER_BUILDER_PEM_DEV }}" > identity.pem
            CANISTER_ID="3x7en-uqaaa-aaaai-abgca-cai"
          else
            echo "${{ secrets.COVER_BUILDER_PEM_PROD }}" > identity.pem
            CANISTER_ID="iftvq-niaaa-aaaai-qasga-cai"
          fi
          echo "CANISTER_ID=${CANISTER_ID}" >> $GITHUB_ENV
          # version checking 1.xx.*
          if [[ "${{ github.event.inputs.dfx_version }}" =~ ^[0-9]+\.[0-9][0-9]+\.[0-9]+$ ]]
          then
            dfx identity import --disable-encryption cover identity.pem
          else
            dfx identity import cover identity.pem
          fi
          dfx identity use cover

      - name: Init Verification
        if: always()
        run: |
          dfx canister --network ic call "${CANISTER_ID}" submitVerification  \
          "(record{ \
            owner_id=principal\"${{ github.event.inputs.owner_id }}\"; \
            canister_id=principal\"${{ github.event.inputs.canister_id }}\"; \
            canister_name=\"${{ github.event.inputs.canister_name }}\"; \
            repo_url=\"${{ github.event.inputs.repo_url }}\"; \
            commit_hash=\"${{ github.event.inputs.commit_hash }}\"; \
            build_url=\"https://github.com/Psychedelic/cover-builder/actions/runs/${{github.run_id}}\"; \
            build_status=variant{ Building }; \
            rust_version=opt\"${{ github.event.inputs.rust_version }}\"; \
            dfx_version=\"${{ github.event.inputs.dfx_version }}\"; \
            optimize_count=${{ github.event.inputs.optimize_count }}:nat8; \
            repo_visibility=opt\"$REPO_VISIBILITY\"; \
          })"

      - name: Clone github repo
        run: |
          git init
          if [ -z ${{ github.event.inputs.repo_access_token }} ]
          then 
            git remote add origin https://github.com/${{ github.event.inputs.repo_url }}
          else
            git remote add origin https://${{ github.event.inputs.repo_access_token }}@github.com/${{ github.event.inputs.repo_url }}
          fi
          git fetch origin ${{ github.event.inputs.commit_hash }} --depth 1
          git reset --hard FETCH_HEAD

      - name: Validate dfx build type
        run: |
          CANISTER_TYPE=$(jq '.canisters."${{ github.event.inputs.canister_name }}".type' < dfx.json)
          case $CANISTER_TYPE in
            (\"rust\" | \"motoko\")
              CANISTER_TYPE="$(echo ${CANISTER_TYPE} | tr -d '"')"
              CANISTER_TYPE="$(echo ${CANISTER_TYPE} | awk '{ print toupper(substr($0, 1, 1)) substr($0, 2) }')"
              echo "CANISTER_TYPE=$CANISTER_TYPE" >> $GITHUB_ENV
              echo "Passed"
              ;;
            (*)
              echo "Only support DFX build type \"rust\" or \"motoko\""
              exit 1
              ;;
          esac

      - name: Cache Rust
        id: cache-rust
        uses: actions/cache@v2
        with:
          path: |
            /opt/cargo/registry/index/
            /opt/cargo/registry/cache/
            /opt/cargo/git/db/
            /opt/rustup/
            target/
          key: Ubuntu-cargo-${{ hashFiles('**/Cargo.lock') }}-version-${{ github.event.inputs.rust_version }}

      - name: Setup env
        if: github.event.inputs.rust_version != ''
        run: |
          echo "RUSTUP_HOME=/opt/rustup" >> $GITHUB_ENV
          echo "CARGO_HOME=/opt/cargo" >> $GITHUB_ENV
          echo "PATH=/opt/cargo/bin:$PATH" >> $GITHUB_ENV

      - name: Install Rust toolchain
        if: github.event.inputs.rust_version != '' && steps.cache-rust.outputs.cache-hit != 'true'
        env:
          RUST_VERSION: ${{ github.event.inputs.rust_version }}
        run: |
          echo "No Rust found. Start downloading..."
          curl --fail https://sh.rustup.rs/ -sSf | sh -s -- -y --default-toolchain ${RUST_VERSION}-x86_64-unknown-linux-gnu --no-modify-path
          rustup default ${RUST_VERSION}-x86_64-unknown-linux-gnu
          rustup target add wasm32-unknown-unknown

      - name: Build wasm
        run: dfx build --network ic ${{ github.event.inputs.canister_name }}

      - name: Cache ic-cdk-optimizer
        id: cache-ic-cdk-optimizer
        uses: actions/cache@v2
        with:
          path: /opt/cargo/bin/ic-cdk-optimizer
          key: Ubuntu-ic-cdk-optimizer-version-${{ github.event.inputs.rust_version }}

      - name: Install optimizer
        if: github.event.inputs.optimize_count > 0 && github.event.inputs.rust_version != '' && steps.cache-ic-cdk-optimizer.outputs.cache-hit != 'true'
        run: cargo install ic-cdk-optimizer

      - name: Optimize wasm
        if: github.event.inputs.optimize_count > 0 && github.event.inputs.rust_version != ''
        run: |
          i=0
          while [ $i -lt ${{ github.event.inputs.optimize_count }} ]
          do
            ic-cdk-optimizer .dfx/ic/canisters/${{ github.event.inputs.canister_name }}/${{ github.event.inputs.canister_name }}.wasm \
            -o .dfx/ic/canisters/${{ github.event.inputs.canister_name }}/${{ github.event.inputs.canister_name }}.wasm
            i=`expr $i + 1`
          done

      - name: Hash wasm
        run: |
          echo "WASM_HASH=$(openssl dgst -sha256 .dfx/ic/canisters/${{ github.event.inputs.canister_name }}/${{ github.event.inputs.canister_name }}.wasm | awk '/.+$/{print "0x"$2}')" >> $GITHUB_ENV

      - name: Update verification
        if: always()
        run: |
          hash=opt\"$WASM_HASH\"
          if [ -z "$WASM_HASH" ]
          then
            status="variant{ Error }"
          else
            status="variant{ Success }"
          fi
          canister_type=null
          if [ ! -z "$CANISTER_TYPE" ]
          then
            canister_type="opt variant{ $CANISTER_TYPE }"
          fi
          dfx canister --network ic call "${CANISTER_ID}" submitVerification  \
          "(record{ \
            owner_id=principal\"${{ github.event.inputs.owner_id }}\"; \
            canister_id=principal\"${{ github.event.inputs.canister_id }}\"; \
            canister_name=\"${{ github.event.inputs.canister_name }}\"; \
            repo_url=\"${{ github.event.inputs.repo_url }}\"; \
            commit_hash=\"${{ github.event.inputs.commit_hash }}\"; \
            wasm_hash=$hash; \
            build_url=\"https://github.com/Psychedelic/cover-builder/actions/runs/${{github.run_id}}\"; \
            build_status=$status; \
            rust_version=opt\"${{ github.event.inputs.rust_version }}\"; \
            dfx_version=\"${{ github.event.inputs.dfx_version }}\"; \
            optimize_count=${{ github.event.inputs.optimize_count }}:nat8; \
            canister_type=$canister_type; \
            repo_visibility=opt\"$REPO_VISIBILITY\"; \
          })"
